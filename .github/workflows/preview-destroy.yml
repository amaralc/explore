# References:

# - https://github.com/guysenpai/nx-workspace-core
# - https://medium.com/@guysenpai89/nx-monorepo-publish-libraries-to-github-packages-with-github-actions-semantic-release-970883f2786a
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-5f2c3fdffaa0
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-fa9822467b24
# - https://dev.to/xcanchal/monorepo-using-lerna-conventional-commits-and-github-packages-4m8m
# - https://dev.to/xcanchal/automatic-versioning-in-a-lerna-monorepo-using-github-actions-4hij

name: Destroy merged "preview" environment

on:
  pull_request:
    types: [closed] # Workflow triggering events

env:
  HUSKY: 0

jobs: # A workflow can have multiple jobs
  check-target:
    runs-on: ubuntu-latest # Instance type where job will run
    env:
      PRODUCTION_BRANCH: "production"
    steps:
      - name: Get target and source branch names
        run: |
          echo "TARGET_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      - name: Log branch names
        run: |
          echo "Target branch: $TARGET_BRANCH"
          echo "Source branch: $SOURCE_BRANCH"

      - name: Check if PR was merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "PR was merged"
            echo "PR_MERGED=true" >> $GITHUB_ENV
          else
            echo "PR was not merged"
            echo "PR_MERGED=false" >> $GITHUB_ENV
          fi

      - name: Check if target branch is production
        run: |
          if [[ "${{ env.TARGET_BRANCH }}" != "${{ env.PRODUCTION_BRANCH }}" ]]; then
            echo "::error::Target branch is not production, cancelling workflow"
            echo "CANCEL_WORKFLOW=true" >> $GITHUB_ENV
          fi

      - name: Cancel workflow if target branch is not production
        if: env.CANCEL_WORKFLOW == 'true'
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

  destroy:
    needs: [check-target]
    runs-on: ubuntu-latest
    environment:
      name: core-platform-shell-iac-preview
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Get source branch name
        run: |
          echo "SOURCE_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "Source branch: $SOURCE_BRANCH"

      - name: Extract environment name
        run: |
          echo $GITHUB_REF
          echo $GITHUB_HEAD_REF
          branch_name=${{ env.SOURCE_BRANCH }}
          parsed_branch_name=$(echo "$branch_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g') # Replace special characters with dashes, and upper case letters by lowercase letters
          echo "parsed_branch_name=$parsed_branch_name" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          SHORT_SHA=${{ github.sha }}
          echo "short_commit_sha=${SHORT_SHA:0:8}" >> $GITHUB_ENV

      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.SOURCE_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}' > apps/core/platform-shell-iac/preview/credentials.json

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: |
          echo "Running terraform init..."
          echo ""
          terraform init -backend-config='prefix=${{ env.parsed_branch_name }}' # Set the backend prefix as the parsed branch name (environment name)
        working-directory: apps/core/platform-shell-iac/preview

      - name: Terraform validate
        run: |
          echo "Running terraform validate..."
          terraform validate
        working-directory: apps/core/platform-shell-iac/preview

      - name: Terraform Destroy
        run: |
          echo "Running terraform plan..."
          echo "Commit Hash: ${{ env.short_commit_sha }}"
          terraform plan -out=tfplan -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var  "gcp_location=${{ secrets.GCP_LOCATION }}" -var "short_commit_sha=${{ env.short_commit_sha }}" -var "vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}" -var "core_platform_shell_browser_vercel_project_id=${{ secrets.CORE_PLATFORM_SHELL_BROWSER_VERCEL_PROJECT_ID }}" -var "core_root_shell_graph_vercel_project_id=${{ secrets.CORE_ROOT_SHELL_GRAPH_VERCEL_PROJECT_ID }}" -var "dx_dev_docs_browser_vercel_project_id=${{ secrets.DX_DEV_DOCS_BROWSER_VERCEL_PROJECT_ID }}" -var "gcp_organization_id=${{ secrets.GCP_ORGANIZATION_ID }}" -var "gcp_billing_account_id=${{ secrets.GCP_BILLING_ACCOUNT_ID }}"
        working-directory: apps/core/platform-shell-iac/preview
