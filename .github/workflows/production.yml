name: Build and Push Docker image

on:
  create:
    tags:
      - "peerlab@[0-9]+.[0-9]+.[0-9]+"

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch
        run: |
          BRANCHES=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/branches-where-head)
          if [[ $BRANCHES != *"production"* ]]; then
            echo "Tag is not on the production branch, cancelling workflow."
            exit 1
          fi
  build:
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Google Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.GCP_PROJECT_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./apps/researchers/peers/Dockerfile
          push: true
          tags: |
            ${{ secrets.GCP_PROJECT_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.GCP_PROJECT_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          IMAGE_NAME: researchers-peers

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: staging
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v3

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}' > apps/core/platform/iac-shell/staging/credentials.json

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.9

      - name: Terraform init
        run: |
          echo "Running terraform init..."
          echo ""
          terraform init
        working-directory: apps/core/platform/iac-shell/staging

      - name: Terraform validate
        run: |
          echo "Running terraform validate..."
          terraform validate
        working-directory: apps/core/platform/iac-shell/staging

      - name: Terraform Plan
        run: |
          echo "Running terraform plan..."
          terraform plan -out=tfplan -var "database_url=${{ secrets.POSTGRES_POOLED_CONNECTION_DATABASE_URL }}" -var "direct_url=${{ secrets.POSTGRES_DIRECT_CONNECTION_DATABASE_URL }}" -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var  "region=${{ secrets.GCP_PROJECT_LOCATION }}" -var "commit_hash=${{ github.sha }}" -var "vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}"
        working-directory: apps/core/platform/iac-shell/staging

      - name: Terraform Apply
        run: |
          echo "Running terraform apply..."
          terraform apply -auto-approve tfplan
        working-directory: apps/core/platform/iac-shell/staging
