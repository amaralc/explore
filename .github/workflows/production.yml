name: Build and Push Docker image

# on:
#   create:
#     tags:
#       - "peerlab@[0-9]+.[0-9]+.[0-9]+"
#     paths:
#       - "apps/core/platform-shell-iac/**"
#       - "apps/researchers/peers/svc-rest-api/**"
#       - "apps/researchers/peers/svc-consumer/**"
#       - "libs/researchers/peers/**"
#       - "package.json"
#       - "yarn.lock"
#       - ".github/workflows/production.yml"
on:
  push:
    branches:
      - feature/PEER-541-preview-environments-with-gcp

jobs:
  # check-branch:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check branch
  #       run: |
  #         BRANCHES=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/branches-where-head)
  #         if [[ $BRANCHES != *"production"* ]]; then
  #           echo "Tag is not on the production branch, cancelling workflow."
  #           exit 1
  #         fi
  build:
    runs-on: ubuntu-latest
    # needs: [check-branch]
    # environment:
    #   name: peerlab-preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0 # This is important to get all history for all branches
          ref: production

      - name: Extract branch name
        run: |
          echo $GITHUB_REF
          echo $GITHUB_HEAD_REF
          echo "environment_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Check if app was affected
        run: |
          LAST_MERGE_COMMIT_BEFORE_HEAD=$(git log --merges -n 2 --pretty=format:"%H" | tail -n 1)
          echo 'Last merge commit before head:' $LAST_MERGE_COMMIT_BEFORE_HEAD

          yarn install

          AFFECTED_APPS=$(npx nx print-affected --type=app --select=projects --base=$LAST_MERGE_COMMIT_BEFORE_HEAD)
          echo 'Affected apps:' $AFFECTED_APPS

          PROJECT_NAME=researchers-peers-svc-rest-api
          if [[ $AFFECTED_APPS == *$PROJECT_NAME* ]]; then
            echo 'âœ… - Build can proceed since app was affected!'
            echo "affected=true" >> $GITHUB_ENV
          else
            # If no dependency was affected, cancel build
            echo 'ðŸ›‘ - Build cancelled since no dependency was affected'
            echo "affected=true" >> $GITHUB_ENV # TODO: Change to false
          fi

      - name: Get short commit hash
        if: ${{ env.affected == 'true' }}
        run: |
          SHORT_SHA=${{ github.sha }}
          echo "short_commit_sha=${SHORT_SHA:0:8}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: ${{ env.affected == 'true' }}
        uses: docker/setup-buildx-action@v2

      - name: Login to Google Container Registry
        if: ${{ env.affected == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.GCP_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: Build and push Docker image
        if: ${{ env.affected == 'true' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/researchers/peers/svc-rest-api/Dockerfile
          push: true
          tags: |
            ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.environment_name }}
            ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.short_commit_sha }}
        env:
          IMAGE_NAME: researchers-peers-svc-rest-api

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    # environment:
    #   name: peerlab-preview
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Extract branch name
        run: echo "environment_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          SHORT_SHA=${{ github.sha }}
          echo "short_commit_sha=${SHORT_SHA:0:8}" >> $GITHUB_ENV

      - name: Checkout production branch
        uses: actions/checkout@v3

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}' > apps/core/platform-shell-iac/credentials.json

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: |
          echo "Running terraform init..."
          echo ""
          terraform init
        working-directory: apps/core/platform-shell-iac

      - name: Terraform validate
        run: |
          echo "Running terraform validate..."
          terraform validate
        working-directory: apps/core/platform-shell-iac

      - name: Terraform Plan
        run: |
          echo "Running terraform plan..."
          echo "Commit Hash: ${{ env.short_commit_sha }}"
          terraform plan -out=tfplan -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var  "gcp_location=${{ secrets.GCP_LOCATION }}" -var "short_commit_sha=${{ env.short_commit_sha }}" -var "vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}"
        working-directory: apps/core/platform-shell-iac

      - name: Terraform Apply
        run: |
          echo "Running terraform apply..."
          terraform apply -auto-approve tfplan
        working-directory: apps/core/platform-shell-iac
