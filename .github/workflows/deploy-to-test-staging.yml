# References:

# - https://github.com/guysenpai/nx-workspace-core
# - https://medium.com/@guysenpai89/nx-monorepo-publish-libraries-to-github-packages-with-github-actions-semantic-release-970883f2786a
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-5f2c3fdffaa0
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-fa9822467b24

name: Build and Deploy to test-staging ##

on:
  push:
    branches:
      - test-staging
    paths:
      - "apps/core/platform/iac-shell/**"
      - "apps/researchers/peers/svc-rest-api/**"
      - "apps/researchers/peers/svc-consumer/**"
      - "apps/researchers/peers/Dockerfile"
      - "libs/researchers/peers/**"
      - "package.json"
      - "yarn.lock"
      - ".github/workflows/deploy-to-test-staging.yml"

env:
  HUSKY: 0
  DOCKER_IMAGE_NAME: researchers-peers # Must match configuration in main.tf for that app

jobs:
  build-researchers-peers-svc:
    runs-on: ubuntu-latest
    environment:
      name: test-staging
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout test-staging branch
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          token: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}' > apps/core/platform/iac-shell/test-staging/credentials.json

      - name: Build docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:latest -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} -f ./apps/researchers/peers/Dockerfile .

      - name: Configure docker client
        run: |
          gcloud auth configure-docker --quiet

      - name: Push docker image to container registry
        run: |
          gcloud docker -- push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          gcloud docker -- push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # - id: "auth"
      #   name: "Authenticate to Google Cloud"
      #   uses: "google-github-actions/auth@v1"
      #   with:
      #     credentials_json: ${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}

      # - name: "Set up Cloud SDK"
      #   uses: "google-github-actions/setup-gcloud@v1"
      #   with:
      #     service_account_key: ${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}
      #     project_id: ${{ secrets.GCP_PROJECT_ID }}
      #     export_default_credentials: true

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Log in to Google Artifact Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: europe-west3-docker.pkg.dev
      #     username: _json_key
      #     password: ${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./apps/researchers/peers/Dockerfile
      #     push: true
      #     tags: |
      #       europe-west3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-images/${{ env.DOCKER_IMAGE_NAME }}:latest
      #       europe-west3-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-images/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  # deploy-to-test-staging:
  #   needs: [build-researchers-peers-svc]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: test-staging
  #   env:
  #     GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  #     GCP_REGION: ${{ secrets.GCP_REGION }}
  #     POSTGRES_POOLED_CONNECTION_DATABASE_URL: ${{ secrets.POSTGRES_POOLED_CONNECTION_DATABASE_URL }}
  #     POSTGRES_DIRECT_CONNECTION_DATABASE_URL: ${{ secrets.POSTGRES_DIRECT_CONNECTION_DATABASE_URL }}
  #     VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}

  #   steps:
  #     - name: Checkout test-staging branch
  #       uses: actions/checkout@v3
  #       if: ${{ github.event_name != 'pull_request' }}
  #       with:
  #         token: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
  #         fetch-depth: 0

  #     - name: Save GCP credentials to file
  #       run: |
  #         echo '${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}' > apps/core/platform/iac-shell/test-staging/credentials.json

  #     - id: "auth"
  #       name: "Authenticate to Google Cloud"
  #       uses: "google-github-actions/auth@v1"
  #       with:
  #         credentials_json: ${{ secrets.GCP_PEERLAB_TF_SERVICE_ACCOUNT }}

  #     - name: "Set up Cloud SDK"
  #       uses: "google-github-actions/setup-gcloud@v1"

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.3.9

  #     - name: Terraform init
  #       run: |
  #         echo "Running terraform init..."
  #         echo ""
  #         terraform init
  #       working-directory: apps/core/platform/iac-shell/test-staging

  #     - name: Terraform validate
  #       run: |
  #         echo "Running terraform validate..."
  #         terraform validate
  #       working-directory: apps/core/platform/iac-shell/test-staging

  #     - name: Terraform Plan
  #       run: |
  #         echo "Running terraform plan..."
  #         terraform plan -out=tfplan -var "database_url=${{ secrets.POSTGRES_POOLED_CONNECTION_DATABASE_URL }}" -var "direct_url=${{ secrets.POSTGRES_DIRECT_CONNECTION_DATABASE_URL }}" -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var  "region=${{ secrets.GCP_REGION }}" -var "commit_hash=${{ github.sha }}" -var "vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}"
  #       working-directory: apps/core/platform/iac-shell/test-staging

  #     - name: Terraform Apply
  #       run: |
  #         echo "Running terraform apply..."
  #         terraform apply -auto-approve tfplan
  #       working-directory: apps/core/platform/iac-shell/test-staging
