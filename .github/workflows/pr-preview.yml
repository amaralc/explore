# References:

# - https://github.com/guysenpai/nx-workspace-core
# - https://medium.com/@guysenpai89/nx-monorepo-publish-libraries-to-github-packages-with-github-actions-semantic-release-970883f2786a
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-5f2c3fdffaa0
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-fa9822467b24
# - https://dev.to/xcanchal/monorepo-using-lerna-conventional-commits-and-github-packages-4m8m
# - https://dev.to/xcanchal/automatic-versioning-in-a-lerna-monorepo-using-github-actions-4hij

name: Pull Request Checks and Provisioning of Preview Environment

on:
  pull_request:
    types: [opened, synchronize] # Workflow triggering events

env:
  HUSKY: 0

jobs: # A workflow can have multiple jobs
  pr-checks: # Name of the job
    runs-on: ubuntu-latest # Instance type where job will run
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    strategy:
      matrix:
        node-version: [18]
        npm-version: [8]
        yarn-version: ["1.22.x"]
        pnpm-version: [7]
    steps:
      - name: Checkout [Pull Request] # Download code from the repository
        uses: actions/checkout@v2 # Public action
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Checkout all branches and tags

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2 # Public action
        with:
          main-branch-name: ${{ github.base_ref }}

      - name: Detect package manager
        id: package_manager
        run: |
          echo "package_manager=$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")" >> $GITHUB_ENV

      - name: Set node/npm/yarn versions using volta
        uses: volta-cli/action@v3
        with:
          node-version: "${{ matrix.node-version }}"
          npm-version: "${{ matrix.npm-version }}"
          yarn-version: "${{ matrix.yarn-version }}"

      - name: Install PNPM
        if: env.package_manager == 'pnpm'
        uses: pnpm/action-setup@v2.2.1
        with:
          version: "${{ matrix.pnpm-version }}"

      - name: Print node/npm/yarn/pnpm versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )
          echo "Node: ${node_ver:1}"
          echo "NPM: $(npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi
          echo "node_version=${node_ver:1}" >> $GITHUB_ENV

      - name: Use the node_modules cache if available [npm]
        if: env.package_manager == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Use the node_modules cache if available [pnpm]
        if: env.package_manager == 'pnpm'
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ env.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Get yarn cache directory path
        if: env.package_manager == 'yarn'
        id: yarn-cache-dir-path
        run: echo "yarn_cache_dir_path=$(yarn cache dir)" >> $GITHUB_ENV

      - name: Use the node_modules cache if available [yarn]
        if: env.package_manager == 'yarn'
        uses: actions/cache@v2
        with:
          path: ${{ env.yarn_cache_dir_path }}
          key: ${{ runner.os }}-node-${{ env.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.node_version }}-

      - name: Install dependencies
        run: |
          if [ "${{ env.package_manager == 'yarn' }}" == "true" ]; then
            echo "Running yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          elif [ "${{ env.package_manager == 'pnpm' }}" == "true" ]; then
            echo "Running pnpm install --frozen-lockfile"
            pnpm install --frozen-lockfile
          else
            echo "Running npm ci"
            npm ci
          fi

      - name: Lint and test affected projects
        run: |
          # npx nx format:check
          # npx nx affected --target build --parallel 3
          npx nx affected --target lint --parallel 3
          npx nx affected --target test --parallel 3 --ci --code-coverage

  build:
    needs: [pr-checks]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: researchers-peers-svc-rest-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # This is important to get all history for all branches

      - name: Extract environment name
        run: |
          echo $GITHUB_REF
          echo $GITHUB_HEAD_REF
          branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          parsed_branch_name=$(echo "$branch_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g') # Replace special characters with dashes, and upper case letters by lowercase letters
          echo "environment_name=$parsed_branch_name" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          SHORT_SHA=${{ github.sha }}
          echo "short_commit_sha=${SHORT_SHA:0:8}" >> $GITHUB_ENV

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}' > apps/core/platform-shell-iac/credentials.json

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: Check if Docker image exists
        id: check_image
        run: |
          IMAGE_EXISTS=$(gcloud container images list-tags ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }} --filter="tags:${{ env.environment_name }}" --format=json | jq '. | length')
          if [ $IMAGE_EXISTS -eq 0 ]; then
            echo "is_existing_image=false" >> $GITHUB_ENV
          else
            echo "is_existing_image=true" >> $GITHUB_ENV
          fi

      - name: Check if app was affected
        if: ${{ env.is_existing_image == 'true' }}
        run: |
          LAST_MERGE_COMMIT_BEFORE_HEAD=$(git log --merges -n 2 --pretty=format:"%H" | tail -n 1)
          echo 'Last merge commit before head:' $LAST_MERGE_COMMIT_BEFORE_HEAD

          yarn install

          AFFECTED_APPS=$(npx nx print-affected --type=app --select=projects --base=$LAST_MERGE_COMMIT_BEFORE_HEAD)
          echo 'Affected apps:' $AFFECTED_APPS

          PROJECT_NAME=researchers-peers-svc-rest-api
          if [[ $AFFECTED_APPS == *$PROJECT_NAME* ]]; then
            echo 'âœ… - Build can proceed since app was affected!'
            echo "affected=true" >> $GITHUB_ENV
          else
            # If no dependency was affected, cancel build
            echo 'ðŸ›‘ - Build cancelled since no dependency was affected'
            echo "affected=true" >> $GITHUB_ENV # TODO: Change to false
          fi

      - name: Set up Docker Buildx
        if: ${{ env.affected == 'true' || env.is_existing_image == 'false' }}
        uses: docker/setup-buildx-action@v2

      - name: Login to Google Container Registry
        if: ${{ env.affected == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.GCP_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: Build and push Docker image
        if: ${{ env.affected == 'true' || env.is_existing_image == 'false' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/researchers/peers/svc-rest-api/Dockerfile
          push: true
          no-cache: true
          tags: |
            ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.environment_name }}
            ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_DOCKER_ARTIFACT_REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.short_commit_sha }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      # - name: Extract branch name
      #   run: echo "environment_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Get short commit hash
        run: |
          SHORT_SHA=${{ github.sha }}
          echo "short_commit_sha=${SHORT_SHA:0:8}" >> $GITHUB_ENV

      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Save GCP credentials to file
        run: |
          echo '${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}' > apps/core/platform-shell-iac/credentials.json

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCP_TF_ADMIN_SERVICE_ACCOUNT_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: |
          echo "Running terraform init..."
          echo ""
          terraform init
        working-directory: apps/core/platform-shell-iac

      - name: Terraform validate
        run: |
          echo "Running terraform validate..."
          terraform validate
        working-directory: apps/core/platform-shell-iac

      - name: Terraform Plan
        run: |
          echo "Running terraform plan..."
          echo "Commit Hash: ${{ env.short_commit_sha }}"
          terraform plan -out=tfplan -var "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" -var  "gcp_location=${{ secrets.GCP_LOCATION }}" -var "short_commit_sha=${{ env.short_commit_sha }}" -var "vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}"
        working-directory: apps/core/platform-shell-iac

      - name: Terraform Apply
        run: |
          echo "Running terraform apply..."
          terraform apply -auto-approve tfplan
        working-directory: apps/core/platform-shell-iac
