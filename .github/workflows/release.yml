# References:

# - https://github.com/guysenpai/nx-workspace-core
# - https://medium.com/@guysenpai89/nx-monorepo-publish-libraries-to-github-packages-with-github-actions-semantic-release-970883f2786a
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-5f2c3fdffaa0
# - https://medium.com/@guysenpai89/nx-monorepo-publish-your-libraries-to-github-packages-with-github-actions-semantic-release-fa9822467b24

name: Release

# Trigger the workflow when pushing to the bugfix branch
on:
  push:
    branches:
      - trunk

# Set environment variable to disable Husky
env:
  HUSKY: 0

jobs:
  trunk:
    # Run the job on Ubuntu latest version
    runs-on: ubuntu-latest

    # Set the working directory for this job
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    # Define the strategy for this job
    strategy:
      matrix:
        node-version: [18]
        npm-version: [8]
        yarn-version: ["1.22.x"]
        pnpm-version: [7]

    steps:
      - name: Checkout [Default Branch]
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          token: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{ github.base_ref }}

      - name: Detect package manager
        id: package_manager
        run: |
          echo "::set-output name=name::$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")"

      - name: Set node/npm/yarn versions using volta
        uses: volta-cli/action@v3
        with:
          node-version: "${{ matrix.node-version }}"
          npm-version: "${{ matrix.npm-version }}"
          yarn-version: "${{ matrix.yarn-version }}"

      - name: Install PNPM
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: pnpm/action-setup@v2.2.1
        with:
          version: "${{ matrix.pnpm-version }}"

      - name: Print node/npm/yarn/pnpm versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )
          echo "Node: ${node_ver:1}"
          echo "NPM: $(npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi
          echo "::set-output name=node_version::${node_ver:1}"

      - name: Use the node_modules cache if available [npm]
        if: steps.package_manager.outputs.name == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Use the node_modules cache if available [pnpm]
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Get yarn cache directory path
        if: steps.package_manager.outputs.name == 'yarn'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use the node_modules cache if available [yarn]
        if: steps.package_manager.outputs.name == 'yarn'
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Install dependencies
        run: |
          if [ "${{ steps.package_manager.outputs.name == 'yarn' }}" == "true" ]; then
            echo "Running yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          elif [ "${{ steps.package_manager.outputs.name == 'pnpm' }}" == "true" ]; then
            echo "Running pnpm install --frozen-lockfile"
            pnpm install --frozen-lockfile
          else
            echo "Running npm ci"
            npm ci
          fi

      - run: | # npx nx format:check
          npx nx affected --target lint --parallel 3
          npx nx affected --target test --parallel 3 --ci --code-coverage
          # npx nx affected --target build --parallel 3

      # - name: Release Libs
      #   if: ${{ success() && (github.event_name != 'pull_request' || github.event.action == 'closed' && github.event.pull_request.merged == true) }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "${{ github.actor}}@users.noreply.github.com"
      #     echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
      #     yarn publish:libs

      - name: Set Remote URL
        run: |
          git remote set-url origin "https://${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}@github.com/amaralc/peerlab.git"
          git remote -v

      - name: Release Step
        if: ${{ success() && (github.event_name != 'pull_request' || github.event.action == 'closed' && github.event.pull_request.merged == true) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}
        run: |
          git status
          git diff
          yarn git:discard:all
          git status
          git diff
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor}}@users.noreply.github.com"
          # echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_ACTIONS_PERSONAL_ACCESS_TOKEN }}" >> .npmrc
          yarn release

      - name: Configure Fly CLI
        run: |
          mkdir -p ~/.fly
          echo "api_key = \"$FLY_API_TOKEN\"" > ~/.fly/config.toml

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.3.9 # Update this to the desired Terraform version

      # - name: Terraform Apply
      #   if: ${{ success() && (github.event_name != 'pull_request' || github.event.action == 'closed' && github.event.pull_request.merged == true) }}
      #   env:
      #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      #     TF_VAR_database_url: ${{ secrets.TF_VAR_database_url }}
      #     TF_VAR_direct_url: ${{ secrets.TF_VAR_direct_url }}
      #   run: |
      #     cd apps/service-iac
      #     terraform init
      #     terraform validate
      #     terraform plan -out=tfplan

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.9

      - name: Install Fly CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Terraform init
        run: |
          echo "Running terraform init..."
          terraform init
        working-directory: apps/service-iac

      - name: Terraform validate
        run: |
          echo "Running terraform validate..."
          terraform validate
        working-directory: apps/service-iac

      - name: Terraform plan
        run: |
          echo "Running terraform plan..."
          terraform plan -var "database_url=${{ secrets.DATABASE_URL }}" -var "direct_url=${{ secrets.DIRECT_URL }}" -var "fly_api_token=${{ secrets.FLY_API_TOKEN }}"
        working-directory: apps/service-iac
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Terraform apply
        run: |
          echo "Running terraform apply..."
          terraform apply -auto-approve -var "database_url=${{ secrets.DATABASE_URL }}" -var "direct_url=${{ secrets.DIRECT_URL }}" -var "fly_api_token=${{ secrets.FLY_API_TOKEN }}"
        working-directory: apps/service-iac
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
